<Boolean Expressions>
A boolean expression is a statement that can either be True or 
1.
Determine if the following statements are boolean expressions or not. If they are, set the matching variable to the right to "Yes" and if not set the variable to "No". Here’s an example of what to do:

Example statement:
My dog is the cutest dog in the world.
This is an opinion and not a boolean expression, so you would set example_statement to "No" in the editor to the right. Okay, now it’s your turn:

Statement one:
Dogs are mammals.

Statement two:
My dog is named Pavel.

Statement three:
Dogs make the best pets.

Statement four:
Cats are female dogs.

>>>
example_statement = "No"
statement_one = "Yes"
statement_two = "Yes"
statement_three = "No"
statement_four = "Yes"

<Relational Operators: Equals and Not Equals>
1.
Determine if the following boolean expressions are True or False. Input your answer as True or False in the appropriate variable to the right.

Statement one:
(5 * 2) - 1 == 8 + 1

Statement two:
13 - 6 != (3 * 2) + 1

Statement three:
3 * (2 - 1) == 4 - 1

>>>
1.
Determine if the following boolean expressions are True or False. Input your answer as True or False in the appropriate variable to the right.

Statement one:

(5 * 2) - 1 == 8 + 1

Statement two:
13 - 6 != (3 * 2) + 1

Statement three:
3 * (2 - 1) == 4 - 1


>>>
statement_one = True
statement_two = False
statement_three = True

#True와 False에 ""를 씌워서 string화 하면 틀린다..

<Boolean Variables>
1.
Create a variable named my_baby_bool and set it equal to "true".
>>>
my_baby_bool = "true"

2.
Check the type of my_baby_bool using type(my_baby_bool).
You’ll have to print it to get the results to display in the terminal.
>>>
print(type(my_baby_bool))
<class 'str'>

3.
It’s not a boolean variable! Boolean values True and False always need to be capitalized and do not have quotation marks.
Create a variable named my_baby_bool_two and set it equal to True.
>>>
my_baby_bool_two = 1!=3

4.
Check the type of my_baby_bool_two and make sure you successfully created a boolean variable.
You’ll have to print it to get the results to display in the terminal.
>>>
print(type(my_baby_bool_two))
<class 'bool'>

<If Statements>
1.
In the workspace script.py there is a function with an if statement. I wrote this function because my coworker Dave kept using my computer without permission and he is a real doofus. It takes user_name as an input and if the user is Dave it tells him to stay off my computer.
Enter a user name in the field for user_name and try running the function.
>>>
def dave_check(user_name):
  if user_name = "Dave":
    return "Get off my computer Dave!"

# Enter a user name here, make sure to make it a string
user_name = "Sue"

print(dave_check(user_name))
---
File "script.py", line 2
    if user_name = "Dave":
                 ^
SyntaxError: invalid syntax
 
2.
Oh no! We got a SyntaxError! This happens when we make a small error in the syntax of the conditional statement.
Read through the error message carefully and see if you can find the error. Then, fix it, and run the code again.
>>>
def dave_check(user_name):
  if user_name == "Dave":
    return "Get off my computer Dave!"
  
3.
Ugh! Dave got around my security and has been logging onto my computer using our coworker Angela’s user name, angela_catlady_87.
Update the function with a second if statement so it checks for this user name as well and returns
 "I know it is you Dave! Go away!"
in response. That’ll teach him!
>>>
def dave_check(user_name):
  if user_name == "Dave":
    return "Get off my computer Dave!"
  if user_name == "angela_catlady_87":
    return "I know it is you Dave! Go away!"

